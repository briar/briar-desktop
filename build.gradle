// Top-level build file where you can add configuration options common to all sub-projects/modules.
import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

import static java.util.Collections.list

buildscript {
	repositories {
		jcenter()
		mavenLocal()
		google()
		maven {
			url 'https://plugins.gradle.org/m2/'
		}
	}

	dependencies {
		classpath 'com.android.tools.build:gradle:3.5.1'
		classpath 'ru.vyarus:gradle-animalsniffer-plugin:1.5.0'
		classpath files('libs/gradle-witness.jar')
	}
}

plugins {
	id 'application'
	id 'idea'
	id 'org.jetbrains.kotlin.jvm' version '1.3.40'
	id 'org.jetbrains.kotlin.kapt' version '1.3.40'
}

repositories {
	jcenter()
	mavenLocal()
	google()
	maven {
		url 'https://plugins.gradle.org/m2/'
	}
	maven { url 'https://jitpack.io' }
	maven { url 'https://mvn.topobyte.de' }
	maven { url 'https://mvn.slimjars.com' }
}

afterEvaluate {
	tasks.withType(Test) {
		// Allow tests to be re-run if any optional tests are enabled
		outputs.upToDateWhen { System.getenv("OPTIONAL_TESTS") == null }
		// Use entropy-gathering device specified on command line, if any
		systemProperty 'java.security.egd', System.getProperty('java.security.egd')
	}
}

kapt {
	correctErrorTypes = true
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	implementation project(path: ':briar:briar-core', configuration: 'default')
	implementation project(path: ':briar:bramble-java', configuration: 'default')

	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.40'
	implementation 'io.javalin:javalin:3.5.0'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
	implementation 'com.github.ajalt:clikt:2.2.0'
	implementation 'commons-io:commons-io:2.4'
	implementation 'com.google.zxing:javase:3.4.1'
	implementation 'com.github.weisj:darklaf-core:2.5.5'

	implementation 'de.topobyte:swing-utils:0.0.12'
	implementation 'de.topobyte:awt-utils:0.0.3'
	implementation 'de.topobyte:melon-resources:0.0.1'
	implementation 'de.topobyte:chromaticity-awt:0.0.2'

	runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'

	def daggerVersion = '2.24'
	kapt "com.google.dagger:dagger-compiler:$daggerVersion"

	testImplementation project(path: ':briar:bramble-api', configuration: 'testOutput')
	testImplementation project(path: ':briar:bramble-core', configuration: 'testOutput')
	testImplementation project(path: ':briar:briar-core', configuration: 'testOutput')

	def junitVersion = '5.5.2'
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
	testImplementation 'io.mockk:mockk:1.9.3'
	testImplementation 'org.skyscreamer:jsonassert:1.5.0'
	testImplementation 'khttp:khttp:0.1.0'
	testImplementation 'javax.annotation:jsr250-api:1.0'

	kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"
}

application {
    mainClassName = 'org.briarproject.briar.swing.MainKt'
}

jar {
	manifest {
		attributes(
				'Main-Class': 'org.briarproject.briar.swing.MainKt'
		)
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it).matching {
			exclude { it.name.endsWith('.DSA') }}}
	}
	doLast() {
		// Rename the original jar
		File jar = project.jar.archivePath
		String srcPath = jar.toString().replaceFirst('\\.jar$', '.unsorted.jar')
		File srcFile = new File(srcPath)
		jar.renameTo(srcFile)
		JarFile srcJarFile = new JarFile(srcFile)
		OutputStream destStream = new JarOutputStream(new FileOutputStream(jar))
		// Read and sort the entries
		Map<String, JarEntry> entries = new TreeMap<>()
		for (JarEntry e : list(srcJarFile.entries())) entries.put(e.getName(), e)
		// Write the sorted entries
		for (JarEntry srcEntry : entries.values()) {
			JarEntry destEntry = new JarEntry(srcEntry.getName())
			destEntry.setTime(0)
			destStream.putNextEntry(destEntry)
			InputStream srcStream = srcJarFile.getInputStream(srcEntry)
			int read
			byte[] buf = new byte[4096]
			while ((read = srcStream.read(buf, 0, buf.length)) != -1) {
				destStream.write(buf, 0, read)
			}
			destStream.closeEntry()
			srcStream.close()
		}
		destStream.close()
		srcJarFile.close()
	}
}

// At the moment for non-Android projects we need to explicitly mark the code generated by kapt
// as 'generated source code' for correct highlighting and resolve in IDE.
idea {
	module {
		sourceDirs += file('build/generated/source/kapt/main')
		testSourceDirs += file('build/generated/source/kapt/test')
		generatedSourceDirs += file('build/generated/source/kapt/main')
	}
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}


//import org.jetbrains.compose.compose
//import org.jetbrains.compose.desktop.application.dsl.TargetFormat
//import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
//
//plugins {
//    kotlin("jvm") version "1.4.30"
//    kotlin("kapt") version "1.3.72"
//    id("org.jetbrains.compose") version "0.3.1"
//    id("java")
//    id("idea")
//}
//
//group = "app.briar.compose"
//version = "0.1"
//
//repositories {
//    jcenter()
//    mavenCentral()
//    maven { url = uri("https://maven.pkg.jetbrains.space/public/p/compose/dev") }
//}
//
//dependencies {
//    testImplementation(kotlin("test-testng"))
//    implementation(compose.desktop.currentOs)
//    implementation(project(path = ":briar:briar-core", configuration = "default"))
//    implementation(project(path = ":briar:bramble-java", configuration = "default"))
//}
//
//tasks.test {
//    useTestNG()
//}
//
//tasks.withType<KotlinCompile>() {
//    kotlinOptions.jvmTarget = "11"
//}
//
//compose.desktop {
//    application {
//        mainClass = "MainKt"
//        nativeDistributions {
//            targetFormats(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)
//            packageName = "Briar"
//            packageVersion = "1.0.0"
//        }
//    }
//}
